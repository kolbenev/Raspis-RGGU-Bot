from datetime import datetime, timedelta, timezone, date
from typing import Any, Dict, List

from aiogram_dialog import DialogManager

from config.logger import logger
from database.utils import get_user_by_user_id
from database.confdb import session
from database.models import User
from api.rsuh_api import RgguScheduleClient


MOSCOW_TZ = timezone(timedelta(hours=3))
PAIR_TIME_MAP: Dict[int, str] = {
    1: "08.30 - 09.50",
    2: "10.15 - 11.35",
    3: "12.10 - 13.30",
    4: "13.40 - 15.00",
    5: "15.10 - 16.30",
    6: "16.40 - 18.00",
    7: "18.10 - 19.30",
    8: "19.40 - 21.00",
}


def parse_tbl_date_to_iso(date_text_with_weekday: str) -> str | None:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–¥.–º–º.–≥–≥–≥–≥' –≤ ISO-—Å—Ç—Ä–æ–∫—É.
    """
    if not date_text_with_weekday:
        return None
    try:
        only_date = date_text_with_weekday.split()[0]
        d = datetime.strptime(only_date, "%d.%m.%Y").date()
        return d.isoformat()
    except Exception:
        return None


def iter_tbl_days(schedule_payload: Any) -> List[Dict[str, Any]]:
    """
    –í–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –¥–Ω–µ–π –∏–∑ payload —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.
    """
    if isinstance(schedule_payload, dict) and isinstance(
        schedule_payload.get("tblData"), list
    ):
        return [day for day in schedule_payload["tblData"] if isinstance(day, dict)]
    return []


def filter_tbl_days_between(
    schedule_payload: Any, start_date_obj: date, end_date_obj: date
) -> List[Dict[str, Any]]:
    """
    –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–Ω–∏
    —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É –¥–∞—Ç.
    """
    days = iter_tbl_days(schedule_payload)
    result: List[Dict[str, Any]] = []
    for day in days:
        header_date_text = str(day.get("date") or "")
        iso = parse_tbl_date_to_iso(header_date_text)
        if not iso:
            continue
        current = datetime.fromisoformat(iso).date()
        if start_date_obj <= current <= end_date_obj:
            result.append(day)
    return result


def format_day_block(day_obj: Dict[str, Any]) -> str:
    """
    –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π
    –±–ª–æ–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è.
    """
    header_date_text: str = str(day_obj.get("date") or "").strip()
    pairs: List[Dict[str, Any]] = day_obj.get("pairs") or []

    lines: List[str] = [f"<b>{header_date_text}:</b>"]

    def _pair_key(pair: Dict[str, Any]) -> int:
        try:
            return int(pair.get("pair") or 0)
        except Exception:
            return 0

    for pair in sorted(pairs, key=_pair_key):
        pair_number = pair.get("pair")
        time_range = (
            PAIR_TIME_MAP.get(int(pair_number)) if str(pair_number).isdigit() else None
        )

        if str(pair_number).isdigit():
            num = int(pair_number)
            lines.append(
                f"<u>{num}-—è –ø–∞—Ä–∞ ({time_range}):</u>"
                if time_range
                else f"<u>{num}-—è –ø–∞—Ä–∞:</u>"
            )
        else:
            lines.append("<u>–ü–∞—Ä–∞:</u>")

        for flow in pair.get("flows") or []:
            subject_text = (flow.get("subject") or "–ü—Ä–µ–¥–º–µ—Ç").strip()
            lessontype_text = (flow.get("lessontype") or "").strip()
            teacher_text = (flow.get("teacher") or "").strip()
            room_text = (flow.get("room") or "").strip()

            if lessontype_text:
                lines.append(
                    f"{subject_text} ({lessontype_text})"
                    + (f" - –∞—É–¥: {room_text}" if room_text else "")
                )
            else:
                lines.append(
                    subject_text + (f" - –∞—É–¥: {room_text}" if room_text else "")
                )

            if teacher_text:
                lines.append(f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_text}")

            lines.append("")

    while lines and lines[-1] == "":
        lines.pop()

    return "\n".join(lines)


async def fetch_schedule_payload_for_user(user_row: User) -> Any:
    """
    –ü–æ–ª—É—á–∏—Ç—å payload —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    (—Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è).
    """
    async with RgguScheduleClient() as api_client:
        if user_row.status == "teacher" and user_row.teacher_id:
            return await api_client.get_schedule_by_teacher(
                teacher_id=str(user_row.teacher_id)
            )
        if (
            user_row.status == "student"
            and user_row.eduform
            and user_row.course
            and user_row.group_id
        ):
            return await api_client.get_schedule_by_group(
                eduform=str(user_row.eduform),
                course=str(user_row.course),
                group_id=str(user_row.group_id),
            )
    return None


async def schedule_today_getter(
    dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """
    –í–µ—Ä–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    user_tg = dialog_manager.event.from_user
    logger.debug(f"{user_tg.username}:{user_tg.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    try:
        user = await get_user_by_user_id(
            user_id=user_tg.id,
            session=session,
        )
        if user is None:
            logger.warning(
                f"{user_tg.username}:{user_tg.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è'"
            )
            return {
                "schedule_text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑."
            }

        schedule_payload = await fetch_schedule_payload_for_user(user)
        if not schedule_payload:
            logger.warning(
                f"{user_tg.username}:{user_tg.id} –ø—É—Å—Ç–æ–π payload —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (today)"
            )
            return {
                "schedule_text": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å."
            }

        target = datetime.now(MOSCOW_TZ).date()
        days = filter_tbl_days_between(schedule_payload, target, target)
        logger.debug(
            f"{user_tg.username}:{user_tg.id} –Ω–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {len(days)}"
        )
        if not days:
            return {"schedule_text": f"{target.strftime('%d.%m.%Y')} - –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π. üéâ"}

        text = format_day_block(days[0])
        logger.info(f"{user_tg.username}:{user_tg.id} –≤—ã–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        return {"schedule_text": text}

    except Exception as e:
        logger.exception(
            f"{user_tg.username}:{user_tg.id} –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {e!r}"
        )
        return {
            "schedule_text": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"
        }


async def schedule_tomorrow_getter(
    dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """
    –í–µ—Ä–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    user_tg = dialog_manager.event.from_user
    logger.debug(f"{user_tg.username}:{user_tg.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
    try:
        user = await get_user_by_user_id(
            user_id=user_tg.id,
            session=session,
        )
        if user is None:
            logger.warning(
                f"{user_tg.username}:{user_tg.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '–Ω–∞ –∑–∞–≤—Ç—Ä–∞'"
            )
            return {
                "schedule_text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑."
            }

        schedule_payload = await fetch_schedule_payload_for_user(user)
        if not schedule_payload:
            logger.warning(
                f"{user_tg.username}:{user_tg.id} –ø—É—Å—Ç–æ–π payload —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (tomorrow)"
            )
            return {
                "schedule_text": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å."
            }

        target = (datetime.now(MOSCOW_TZ) + timedelta(days=1)).date()
        days = filter_tbl_days_between(schedule_payload, target, target)
        logger.debug(
            f"{user_tg.username}:{user_tg.id} –Ω–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {len(days)}"
        )
        if not days:
            return {"schedule_text": f"{target.strftime('%d.%m.%Y')} - –ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π. üéâ"}

        text = format_day_block(days[0])
        logger.info(f"{user_tg.username}:{user_tg.id} –≤—ã–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        return {"schedule_text": text}

    except Exception as e:
        logger.exception(
            f"{user_tg.username}:{user_tg.id} –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {e!r}"
        )
        return {
            "schedule_text": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"
        }


async def schedule_week_getter(
    dialog_manager: DialogManager, **kwargs
) -> Dict[str, Any]:
    """
    –í–µ—Ä–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–µ–¥–µ–ª—é.
    """
    user_tg = dialog_manager.event.from_user
    logger.debug(f"{user_tg.username}:{user_tg.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –Ω–∞ –Ω–µ–¥–µ–ª—é")
    try:
        user = await get_user_by_user_id(
            user_id=user_tg.id,
            session=session,
        )
        if user is None:
            logger.warning(
                f"{user_tg.username}:{user_tg.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '–Ω–∞ –Ω–µ–¥–µ–ª—é'"
            )
            return {
                "schedule_text": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë —Ä–∞–∑."
            }

        schedule_payload = await fetch_schedule_payload_for_user(user)
        if not schedule_payload:
            logger.warning(
                f"{user_tg.username}:{user_tg.id} –ø—É—Å—Ç–æ–π payload —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (week)"
            )
            return {
                "schedule_text": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å."
            }

        start = datetime.now(MOSCOW_TZ).date()
        end = start + timedelta(days=6)

        days = filter_tbl_days_between(schedule_payload, start, end)
        logger.debug(
            f"{user_tg.username}:{user_tg.id} –Ω–∞–π–¥–µ–Ω–æ –¥–Ω–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {len(days)}"
        )
        if not days:
            return {
                "schedule_text": f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n{start.strftime('%d.%m.%Y')}-{end.strftime('%d.%m.%Y')}\n\n–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π. üéâ"
            }

        day_blocks = [format_day_block(day) for day in days]
        schedule_text = (
            f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é\n{start.strftime('%d.%m.%Y')}-{end.strftime('%d.%m.%Y')}"
            + "\n\n"
            + "\n\n‚Äî\n\n".join(day_blocks)
        )

        logger.info(
            f"{user_tg.username}:{user_tg.id} –≤—ã–¥–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é ({len(days)} –¥–Ω–µ–π)"
        )
        return {"schedule_text": schedule_text}

    except Exception as e:
        logger.exception(
            f"{user_tg.username}:{user_tg.id} –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é: {e!r}"
        )
        return {
            "schedule_text": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"
        }
