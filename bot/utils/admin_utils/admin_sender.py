import asyncio

from aiogram.exceptions import (
    TelegramForbiddenError,
    TelegramBadRequest,
    TelegramRetryAfter,
)
from aiogram.types import Message
from aiogram_dialog import DialogManager, ShowMode
from aiogram_dialog.widgets.input import MessageInput

from bot.states import AdminStates
from config.logger import logger
from database.confdb import session
from database.utils import get_all_users


async def make_sender(
    message: Message, widget: MessageInput, dialog_manager: DialogManager
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
    """
    logger.info(
        f"{message.from_user.username}:{message.from_user.id} "
        f"–ù–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ä–µ–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Ç–µ–∫—Å—Ç: {message.text}"
    )

    users = await get_all_users(session)

    if not users:
        await dialog_manager.event.answer(text="‚ùå –í –±–æ—Ç–µ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
        await dialog_manager.switch_to(
            state=AdminStates.main_menu,
            show_mode=ShowMode.DELETE_AND_SEND,
        )
        return

    success_count = 0
    error_count = 0
    skipped_count = 0

    bot = dialog_manager.event.bot

    for user in users:
        try:
            if message.photo:
                await bot.send_photo(
                    chat_id=user.chat_id,
                    photo=message.photo[-1].file_id,
                    caption=message.caption or "",
                )
            else:
                await bot.send_message(
                    chat_id=user.chat_id, text=message.text or "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                )
            success_count += 1

        except TelegramForbiddenError:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username}:{user.id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            skipped_count += 1

        except TelegramBadRequest as e:
            logger.warning(f"BadRequest –¥–ª—è {user.username}:{user.id} ‚Äî {e}")
            skipped_count += 1

        except TelegramRetryAfter as e:
            logger.warning(
                f"FloodWait {e.retry_after}s –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user.username}:{user.id}"
            )
            await asyncio.sleep(e.retry_after)
            continue

        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ {user.username}:{user.id}: {e}")
            error_count += 1

        await asyncio.sleep(0.07)

    await message.answer(
        text=(
            f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n"
            f"‚ùå –û—à–∏–±–∫–∏: {error_count}"
        )
    )
    logger.info("–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É.")
    await dialog_manager.switch_to(
        state=AdminStates.main_menu,
        show_mode=ShowMode.DELETE_AND_SEND,
    )
