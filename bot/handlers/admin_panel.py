"""
–ú–æ–¥—É–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
"""

from sqlalchemy import select, func
from aiogram import Bot
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.middlewares.user_permissions import is_admin
from bot.middlewares.logger import logger
from bot.utils.other.keyboards import cancel_kb, admin_kb, yes_or_no_kb, check_report_kb
from bot.utils.schedule.update_schedule import refresh_schedule_data
from bot.handlers.states import AdminState
from database.confdb import session
from database.models import User, MessagesToAdmin

router = Router(name=__name__)


@router.message(F.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º")
@is_admin
async def send_a_message_to_everyone(message: Message, state: FSMContext) -> None:

    await message.answer(
        text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:", reply_markup=cancel_kb()
    )
    await state.set_state(AdminState.send_a_message_to_everyone)


@router.message(AdminState.send_a_message_to_everyone)
async def send_a_message_to_everyone_step2(
    message: Message, state: FSMContext, bot: Bot
) -> None:
    stmt = select(User)
    result = await session.execute(stmt)
    users = result.scalars().all()

    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer(text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_kb())
        return

    for user in users:
        await bot.send_message(chat_id=user.chat_id, text=message.text)
    else:
        await message.answer(
            text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", reply_markup=admin_kb()
        )
        await state.clear()
        logger.info(
            f"{message.chat.username}:{message.chat.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
        )


@router.message(F.text == "–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤")
@is_admin
async def get_count_users(message: Message, state: FSMContext) -> None:
    stmt = select(func.count(User.id))
    result = await session.execute(stmt)
    count = result.scalar()

    await message.answer(text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count}")


@router.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
@is_admin
async def update_schedule_by_admin(message: Message, state: FSMContext) -> None:
    await message.answer(
        text="–í—ã —É–≤–µ—Ä–µ–Ω–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?", reply_markup=yes_or_no_kb()
    )
    await state.set_state(AdminState.update_schedule)


@router.message(AdminState.update_schedule)
async def update_schedule_by_admin_step2(message: Message, state: FSMContext) -> None:
    if message.text == "–ù–µ—Ç ‚ùå":
        await state.clear()
        await message.answer(text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_kb())
        await state.clear()
        return
    elif message.text == "–î–∞ ‚úÖ":
        await refresh_schedule_data(session=session)
        await message.answer(
            text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=admin_kb()
        )
        await state.clear()
        logger.info(
            f"{message.chat.username}:{message.chat.id} –æ–±–Ω–æ–≤–∏–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å."
        )
    else:
        await message.answer(text="–ù–µ–≤–µ—Ä–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.", reply_markup=admin_kb())
        await state.clear()


@router.message(F.text == "–ö–æ–ª-–≤–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤")
@is_admin
async def count_report(message: Message, state: FSMContext) -> None:
    stmt = select(func.count(MessagesToAdmin.id))
    result = await session.execute(stmt)
    count = result.scalar()

    if count:
        await message.answer(text=f"–†–µ–ø–æ—Ä—Ç–æ–≤: {count}")
    else:
        await message.answer(text="–†–µ–ø–æ—Ä—Ç–æ–≤ –Ω–µ—Ç")


@router.message(F.text == "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ä–µ–ø–æ—Ä—Ç—ã")
async def check_user_messages(message: Message, state: FSMContext) -> None:
    stmt = select(MessagesToAdmin).order_by(MessagesToAdmin.date_time.asc()).limit(1)
    result = await session.execute(stmt)
    user_report: MessagesToAdmin = result.scalar()

    if not user_report:
        await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.", reply_markup=admin_kb())
        await state.clear()
        return

    await message.answer(
        text=f"{user_report.messages}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_report.name}\n"
        f"{user_report.username}:{user_report.chat_id}\n"
        f"{user_report.date_time}\n",
        reply_markup=check_report_kb(),
    )
    await state.update_data(user_report=user_report)
    await state.set_state(AdminState.report_answer)


@router.message(AdminState.report_answer)
async def reply_to_report(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    user_report = data.get("user_report")

    if message.text == "–û—Ç–≤–µ—Ç–∏—Ç—å ‚úÖ":
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=cancel_kb()
        )
        await state.set_state(AdminState.report_answer_for_user)

    elif message.text == "–£–¥–∞–ª–∏—Ç—å ‚ùå":
        await session.delete(user_report)
        await session.commit()
        await message.answer(text="–†–µ–ø–æ—Ä—Ç —É–¥–∞–ª–µ–Ω")
        return await check_user_messages(message, state)

    elif message.text == "–í—ã–π—Ç–∏":
        await message.answer(text="–í—ã—Ö–æ–¥ –∏–∑ —á–µ–∫–µ—Ä–∞ —Ä–µ–ø–æ—Ä—Ç–æ–≤", reply_markup=admin_kb())
        await state.clear()


@router.message(AdminState.report_answer_for_user)
async def report_for_user(message: Message, state: FSMContext, bot: Bot) -> None:
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer(text="–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–ø–æ—Ä—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–¥)")
        return await check_user_messages(message, state)

    data = await state.get_data()
    user_report = data.get("user_report")

    await bot.send_message(
        chat_id=user_report.chat_id,
        text=f"üë®‚Äçüíª –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n {message.text}",
    )
    await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    await session.delete(user_report)
    await session.commit()
    await state.clear()
    return await check_user_messages(message, state)
