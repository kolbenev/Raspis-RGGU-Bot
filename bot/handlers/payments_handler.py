import asyncio

from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery,
    LabeledPrice,
    Message,
    PreCheckoutQuery,
)
from aiogram_dialog import DialogManager, StartMode, ShowMode
from aiogram_dialog.widgets.kbd import Button
from aiogram import Router, F

from bot.states import UserStates
from config.logger import logger
from database.confdb import session
from database.models import User
from database.utils import get_user_by_user_id


router = Router()


async def donate_handler(
    callback: CallbackQuery, button: Button, dialog: DialogManager
):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Å—É–º–º—ã –¥–æ–Ω–∞—Ç–∞
    –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    amount = button.widget_id.split("_")[1]
    user = callback.from_user
    logger.info(f"{user.username}:{user.id} –≤—ã–±—Ä–∞–ª –¥–æ–Ω–∞—Ç –Ω–∞ {amount}‚≠êÔ∏è")
    await dialog.done()

    try:
        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
            description=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –≤—ã–±—Ä–∞–ª–∏ {amount} ‚≠êÔ∏è",
            payload=f"donate_{amount}",
            provider_token="STARS",
            currency="XTR",
            prices=[LabeledPrice(label=f"{amount} Stars", amount=int(amount))],
        )
    except Exception as error:
        logger.exception(
            f"{user.username}:{user.id} –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–Ω–∞—Ç–∞ {amount}‚≠êÔ∏è: {error!r}"
        )
        await callback.message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ üôè"
        )


@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å pre_checkout –∑–∞–ø—Ä–æ—Å
    –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –µ–≥–æ.
    """
    logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ pre_checkout –∑–∞–ø—Ä–æ—Å–∞: %s", pre_checkout_query.id)
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment.invoice_payload.startswith("donate_"))
async def process_successful_payment(
    message: Message, state: FSMContext, dialog_manager: DialogManager
):
    """
    –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    –¥–æ–Ω–∞—Ç–∞ –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é.
    """
    logger.info(
        "–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: payload=%s",
        message.from_user.id,
        message.successful_payment.invoice_payload,
    )
    user: User = await get_user_by_user_id(
        user_id=message.from_user.id,
        session=session,
    )
    target_state = (
        UserStates.status
        if not user
        else (
            UserStates.main_menu_student
            if user.status == "student"
            else UserStates.main_menu_teacher
        )
    )

    send_message = await message.answer(
        "‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª, —Å–ø–∞—Å–∏–±–æ –≤–∞–º –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –°–µ–π—á–∞—Å —è –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é..."
    )
    await asyncio.sleep(5)
    try:
        await send_message.delete()
    except Exception:
        pass

    await dialog_manager.start(
        state=target_state,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.DELETE_AND_SEND,
    )
