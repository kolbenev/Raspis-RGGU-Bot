import asyncio

from sqlalchemy.ext.asyncio import AsyncSession
from telebot import async_telebot
from telebot.types import Message

from bot.admin_panel import send_message_to_everyone, get_count_users
from bot.utils.keyboards import student_kb, admin_kb
from bot.registration import (
    registered_stage_kyrs,
    register_user,
    registered_stage_formob,
    registered_stage_group,
)
from bot.utils.text_for_messages import welcome_messages, info_messages
from bot.utils.getter_variables import API_TOKEN
from bot.utils.update_schedule import daily_schedule_updater, refresh_schedule_data
from bot.utils.utils import lazy_get_user_by_chat_id
from database.confdb import session
from database.models import User
from bot.utils.getters_schedule import (
    get_today_schedule,
    get_tomorrow_schedule,
    get_weekly_schedule,
)


bot = async_telebot.AsyncTeleBot(API_TOKEN)


@bot.message_handler(commands=["start"])
async def command_start(message: Message):
    try:
        user: User = await lazy_get_user_by_chat_id(
            chat_id=message.chat.id, session=session
        )
        if user.admin is True:
            await bot.send_message(
                chat_id=message.chat.id,
                text=welcome_messages,
                reply_markup=admin_kb(),
            )
            user.status = "admin_panel"
            await session.commit()
        else:
            await bot.send_message(
                chat_id=message.chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:",
                reply_markup=student_kb(),
            )

    except ValueError:
        user: User = await register_user(message=message, session=session)
        await bot.send_message(chat_id=message.chat.id, text=welcome_messages)
        await bot.send_message(
            chat_id=message.chat.id, text="–ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:"
        )


@bot.message_handler(commands=["info"])
async def command_info(message: Message):
    await bot.send_message(
        chat_id=message.chat.id,
        text=info_messages,
        parse_mode="HTML",
    )


@bot.message_handler(commands=["changedata"])
async def command_info(message: Message):
    user: User = await lazy_get_user_by_chat_id(chat_id=message.chat.id, session=session)
    user.status = "registration"
    user.substatus = "registered_stage_kyrs"
    user.formob = None
    user.kyrs = None
    user.gruppa = None
    await session.commit()
    await bot.send_message(
        chat_id=message.chat.id,
        text='–ù–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å:'
    )


@bot.message_handler(
    func=lambda message: message.text
    in [
        "üìå –ù–∞ —Å–µ–≥–æ–¥–Ω—è",
        "üåÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞",
        "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é",
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º",
        "–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤",
        "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
    ]
)
async def user_panel(message: Message):
    user: User = await lazy_get_user_by_chat_id(
        chat_id=message.chat.id, session=session
    )

    if message.text == "üìå –ù–∞ —Å–µ–≥–æ–¥–Ω—è":
        schedule: str = await get_today_schedule(
            session=session, chat_id=message.chat.id
        )
        await bot.send_message(
            chat_id=message.chat.id, text=schedule, parse_mode="HTML"
        )
        return True

    if message.text == "üåÖ –ù–∞ –∑–∞–≤—Ç—Ä–∞":
        schedule: str = await get_tomorrow_schedule(
            session=session, chat_id=message.chat.id
        )
        await bot.send_message(
            chat_id=message.chat.id, text=schedule, parse_mode="HTML"
        )
        return True

    if message.text == "üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é":
        schedule: str = await get_weekly_schedule(
            session=session, chat_id=message.chat.id
        )
        await bot.send_message(
            chat_id=message.chat.id, text=schedule, parse_mode="HTML"
        )
        return True

    if (
        message.text
        in ["–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º", "–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤", "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]
        and user.admin is True
    ):
        if message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º":
            await bot.send_message(
                chat_id=message.chat.id,
                text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
            )
            user.substatus = "send_message_everyone"
            await session.commit()
            return True

        if message.text == "–£–∑–Ω–∞—Ç—å –∫–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤":
            count_users = await get_count_users(session=session)
            await bot.send_message(
                chat_id=message.chat.id,
                text=f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {count_users}",
            )
            return True

        if message.text == "–û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
            await bot.send_message(
                chat_id=message.chat.id,
                text="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ?",
            )
            user.substatus = "update_schedule"
            await session.commit()
            return True


@bot.message_handler(content_types=["text"])
async def main(message: Message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    user: User = await lazy_get_user_by_chat_id(
        chat_id=message.chat.id, session=session
    )

    if user.status == "registration":
        if user.substatus == "registered_stage_kyrs":
            await registered_stage_kyrs(
                message=message, user=user, bot=bot, session=session
            )
        elif user.substatus == "registered_stage_formob":
            await registered_stage_formob(
                message=message, user=user, bot=bot, session=session
            )
        elif user.substatus == "registered_stage_group":
            await registered_stage_group(
                message=message, user=user, bot=bot, session=session
            )

        return True

    if user.status == "admin_panel":
        if user.substatus == "send_message_everyone":
            if message.text not in ["0", "O", "o", "–û—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∞", "–æ", "–û"]:
                await send_message_to_everyone(
                    session=session, bot=bot, message=message
                )
                await bot.send_message(
                    chat_id=message.chat.id,
                    text="–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
                )
            else:
                await bot.send_message(
                    chat_id=message.chat.id, text="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –æ—Ç–º–µ–Ω–µ–Ω–∞!"
                )

            user.substatus = None
            await session.commit()
            return True

        if user.substatus == "update_schedule":
            if message.text == "–î–∞":
                await refresh_schedule_data(session=session)
                await bot.send_message(
                    chat_id=message.chat.id, text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."
                )
            else:
                await bot.send_message(
                    chat_id=message.chat.id, text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ."
                )

            user.substatus = None
            await session.commit()
            return True


async def start(session: AsyncSession):
    asyncio.create_task(daily_schedule_updater(session))
    await bot.infinity_polling()


if __name__ == "__main__":
    asyncio.run(start(session=session))
